import random
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator

class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """ 

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()          # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor

        ###########
        ## TO DO ##
        ###########
        # Set any additional class parameters as needed
        self.total_trails =0

    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)
        
        ########### 
        ## TO DO DONE##
        ###########
        # Update epsilon using a decay function of your choice
        # Update additional class parameters as needed
        # If 'testing' is True, set epsilon and alpha to 0
        self.total_trails +=1
        self.a = .03
        #self.epsilon -= .05

        if testing == True :
            self.epsilon = 0
            self.alpha =0
        else:
            self.epsilon = float(1)/math.exp(float(self.a*self.total_trails))

        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint 
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline
        # print "(build_satte) deadline type is: ", type(deadline)
        print "(build_state) inputs are: ",inputs

        ########### 
        ## TO DO DONE##
        ###########
        # Set 'state' as a tuple of relevant data for the agent
        # When learning, check if the state is in the Q-table
        #   If it is not, create a dictionary in the Q-table for the current 'state'
        #   For each action, set the Q-value for the state-action pair to 0
        input_tuple = tuple(sorted(inputs.items()))
        input_light = inputs['light']
        input_oncoming = inputs['oncoming']
        state = (waypoint,input_tuple)
        print "(build_state) state built, state: ", state

        return state


    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """

        ########### 
        ## TO DO ##
        ###########
        # Calculate the maximum Q-value of all actions for a given state
        print "(get_maxQ) state Q is: ", self.Q[state]
        state_dict= dict(self.Q[state])
        print "(get_maxQ) in dict form: ", state_dict
        action_sorted_list = sorted(state_dict.keys(), key=state_dict.get, reverse=True)
        print "(get_maxQ) sorted actions are: ", action_sorted_list
        maxQ = action_sorted_list[0]
        print "(get_maxQ) MaxQ action: ", maxQ
        return maxQ


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        ########### 
        ## TO DO DONE##
        ###########
        # When learning, check if the 'state' is not in the Q-table
        # If it is not, create a new dictionary for that state
        #   Then, for each action available, set the initial Q-value to 0.0
        print "(createQ)Valid Actions are: ", self.valid_actions, " and type: ", type(self.valid_actions)
        if self.learning is True:
            if state not in self.Q.keys():
                #print "State is: ", state, " and type: ", type(state)
                #print "Action is: ", action, " and type: ", type(action)
                #state_action_tuple = (state,action)
                #print "state_action_tuple is: ", state_action_tuple, " and type: ", type(state_action_tuple)
                print "(createQ)state being added to Q."
                actionQ = dict((i,0) for i in self.valid_actions)
                print actionQ
                self.Q [state]=actionQ
                print "(createQ)added item to Q is :  ", self.Q[state]

        return self.Q


    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()
        #action = random.choice(self.valid_actions)

        ########### 
        ## TO DO ##
        ###########
        # When not learning, choose a random action
        # When learning, choose a random action with 'epsilon' probability
        #   Otherwise, choose an action with the highest Q-value for the current state
        print "(choose_action) epsilon value is: ", self.epsilon
        if random.random() <= self.epsilon:
            action = random.choice(self.valid_actions)
            print "(choose_action) random action chosen: ", action
        else:
            print "(choose_action) MaxQ item being chosen."
            action = self.get_maxQ(state)
            print "(choose_action) action chosen: ", action
 
        return action


    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives an award. This function does not consider future rewards 
            when conducting learning. """

        ###########
        ## TO DO DONE##
        ###########
        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')
        print "(learn) pre learning: state: ", state, " action: ", action, " Qvalue: ", self.Q[state][
            action], " reward: ", reward
        self.Q[state][action] = (1-self.alpha)*self.Q[state][action] + \
                                self.alpha * reward
        print "(learn) post learning: state: ", state, " action: ", action, " Qvalue: ", self.Q[state][
            action], " reward: ", reward

        return None


    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn

        return
        

def run():
    """ Driving function for running the simulation. 
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment(verbose=True)
    
    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent,learning=True,alpha = .3)
    
    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent,enforce_deadline=True)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    sim = Simulator(env, update_delay=.000001,log_metrics=True,optimized=True)
    
    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05 
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run(tolerance=.03, n_test=30)


if __name__ == '__main__':
    run()
